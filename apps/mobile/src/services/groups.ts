/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type { GetGroups200, GetGroupsGroupId200 } from './api.schemas'

/**
 * Get groups by user
 * @summary Get groups
 */
export type getGroupsResponse = {
  data: GetGroups200
  status: number
  headers: Headers
}

export const getGetGroupsUrl = () => {
  return 'http://localhost:3000/groups'
}

export const getGroups = async (options?: RequestInit): Promise<getGroupsResponse> => {
  const res = await fetch(getGetGroupsUrl(), {
    ...options,
    method: 'GET'
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getGetGroupsQueryKey = () => {
  return ['http://localhost:3000/groups'] as const
}

export const getGetGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>>
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetGroupsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroups>>> = ({ signal }) =>
    getGroups({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroups>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getGroups>>>
export type GetGroupsQueryError = unknown

export function useGetGroups<
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = unknown
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>,
      'initialData'
    >
  fetch?: RequestInit
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetGroups<
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>,
      'initialData'
    >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetGroups<
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>>
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get groups
 */

export function useGetGroups<
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>>
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetGroupsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get group by id
 * @summary Get group
 */
export type getGroupsGroupIdResponse = {
  data: GetGroupsGroupId200
  status: number
  headers: Headers
}

export const getGetGroupsGroupIdUrl = (groupId: string) => {
  return `http://localhost:3000/groups/${groupId}`
}

export const getGroupsGroupId = async (
  groupId: string,
  options?: RequestInit
): Promise<getGroupsGroupIdResponse> => {
  const res = await fetch(getGetGroupsGroupIdUrl(groupId), {
    ...options,
    method: 'GET'
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getGetGroupsGroupIdQueryKey = (groupId: string) => {
  return [`http://localhost:3000/groups/${groupId}`] as const
}

export const getGetGroupsGroupIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
  TError = unknown
>(
  groupId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>>
    fetch?: RequestInit
  }
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetGroupsGroupIdQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsGroupId>>> = ({ signal }) =>
    getGroupsGroupId(groupId, { signal, ...fetchOptions })

  return { queryKey, queryFn, enabled: !!groupId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsGroupId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetGroupsGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupsGroupId>>>
export type GetGroupsGroupIdQueryError = unknown

export function useGetGroupsGroupId<
  TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
  TError = unknown
>(
  groupId: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>,
        'initialData'
      >
    fetch?: RequestInit
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetGroupsGroupId<
  TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
  TError = unknown
>(
  groupId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>,
        'initialData'
      >
    fetch?: RequestInit
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetGroupsGroupId<
  TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
  TError = unknown
>(
  groupId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>>
    fetch?: RequestInit
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get group
 */

export function useGetGroupsGroupId<
  TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
  TError = unknown
>(
  groupId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>>
    fetch?: RequestInit
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetGroupsGroupIdQueryOptions(groupId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
