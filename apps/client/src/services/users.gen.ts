/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type { GetUsersProfile200 } from './api.schemas'

/**
 * Get user profile by JWT token
 * @summary Get user profile
 */
export type getUsersProfileResponse = {
  data: GetUsersProfile200
  status: number
  headers: Headers
}

export const getGetUsersProfileUrl = () => {
  return '/users/profile'
}

export const getUsersProfile = async (options?: RequestInit): Promise<getUsersProfileResponse> => {
  const res = await fetch(getGetUsersProfileUrl(), {
    ...options,
    method: 'GET'
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getGetUsersProfileQueryKey = () => {
  return ['/users/profile'] as const
}

export const getGetUsersProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUsersProfileQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersProfile>>> = ({ signal }) =>
    getUsersProfile({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersProfile>>>
export type GetUsersProfileQueryError = unknown

export function useGetUsersProfile<
  TData = Awaited<ReturnType<typeof getUsersProfile>>,
  TError = unknown
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>,
      'initialData'
    >
  fetch?: RequestInit
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersProfile<
  TData = Awaited<ReturnType<typeof getUsersProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>,
      'initialData'
    >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersProfile<
  TData = Awaited<ReturnType<typeof getUsersProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get user profile
 */

export function useGetUsersProfile<
  TData = Awaited<ReturnType<typeof getUsersProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUsersProfileQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
